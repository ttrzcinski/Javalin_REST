<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.ttrzcinski.rest.java</groupId>
    <artifactId>hell-on-world-rest</artifactId>
    <version>1.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <maven.compiler.plugin>2.4</maven.compiler.plugin>
        <maven.shade.plugin>3.1.0</maven.shade.plugin>
        <dockerfile.maven.plugin>1.2.2</dockerfile.maven.plugin>
        <javalin.version>5.0.0</javalin.version>
        <mockito.version>3.7.7</mockito.version>
        <junit.version>5.7.1</junit.version>
        <konghg.unirest>3.4.00</konghg.unirest>
        <assertj.core>3.11.1</assertj.core>
        <io.mockk>1.9.3</io.mockk>
        <slf4j.version>[1.7.30,)</slf4j.version>
        <surefire.plugin>2.22.2</surefire.plugin>
        <surefire.provider>1.3.2</surefire.provider>
        <bonigarcia.webdrivermanager>3.6.2</bonigarcia.webdrivermanager>
        <selenium.selenium-chrome-driver>3.141.59</selenium.selenium-chrome-driver>
    </properties>

    <!-- library dependencies -->
    <dependencies>
	<!-- Core library -->
        <dependency>
            <groupId>io.javalin</groupId>
            <artifactId>javalin-bundle</artifactId>
            <version>${javalin.version}</version>
        </dependency>
	<!-- Logging -->
	<dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- Mocking -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
	<dependency>
            <groupId>io.mockk</groupId>
            <artifactId>mockk</artifactId>
            <version>${io.mockk}</version>
            <scope>test</scope>
        </dependency>
        <!-- Unit Testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Extended assertions -->
	<dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${assertj.core}</version>
            <scope>test</scope>
        </dependency>
        <!-- Functional testing rest -->
        <dependency>
            <groupId>com.konghq</groupId>
            <artifactId>unirest-java</artifactId>
            <version>${konghg.unirest}</version>
            <scope>test</scope>
        </dependency>
	<!-- End to end testing with Selenium -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-chrome-driver</artifactId>
            <version>${selenium.selenium-chrome-driver}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.github.bonigarcia</groupId>
            <artifactId>webdrivermanager</artifactId>
            <version>${bonigarcia.webdrivermanager}</version>
            <scope>test</scope>
        </dependency>
	<!-- Fixes XXE injector -->
	<dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.13.2.2</version>
	</dependency>
    </dependencies>

    <distributionManagement>
        <snapshotRepository>
            <id>snapshots</id>
            <name>GitHub Releases</name>
            <url>https://github.com/ttrzcinski/Javalin_REST</url>
        </snapshotRepository>
    </distributionManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin}</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven.shade.plugin}</version>
                <executions>
                    <!-- Run shade goal on package phase -->
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <transformers>
                                <!-- add Main-Class to manifest file -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.ttrzcinski.rest.java.HellOnWorld</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${dockerfile.maven.plugin}</version>
                <configuration>
                    <imageName>javalin_rest</imageName>
                    <baseImage>java</baseImage>
                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
                    <!-- copy the service's jar file from target into the root directory of the image -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire.plugin}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.junit.platform</groupId>
                        <artifactId>junit-platform-surefire-provider</artifactId>
                        <version>${surefire.provider}</version>
                        <!--<scope>test</scope>-->
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
</project>
